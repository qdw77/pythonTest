# 2025.02.25
import socket
import numpy
from queue import Queue
from _thread import *
import cv2 # 영상처리 : 영상에 필터/프레임/전송


encolosure_queue=Queue()

def threaded(client_socket,addr,queue):
    print("connected ",addr[0])
    while True:
        try:
            data=client_socket.recv(1024)
            if not data:
                print("discon")
                break
            stringData=queue.get()
            client_socket.send(str(len(stringData)).ljust(16).encode())
            client_socket.send(stringData)

        except ConnectionResetError as e:
            print('discon')
            break
    client_socket.close()

def webcam(queue):
    global  count
    video_path="~~~~~~~~.mp4"
    capture=cv2.VideoCapture(video_path)

    while True:
        ret, frame=capture.read()
        if ret==False:
            continue

        encode_param=[int(cv2.IMWRITE_JPEG_QUALITY),90]
        result,imgencode=cv2.imencode('.jpg',frame,encode_param)

        data=numpy.array(imgencode)
        stringData=data.tostring()

        if count==0:
            print(stringData)
        count=1
        queue.put(stringData)
        cv2.imshow('server',frame)
        key=cv2.waitKey(1)
        if key==27:
            break


HOST='localhost'
PORT=9989

server_socket=socket.socket(socket.AF_INET,socket.SOCK_STREAM)
server_socket.setsockopt(socket.SOL_SOCKET,socket.SO_REUSEADDR,1)
server_socket.bind((HOST,PORT))
server_socket.listen()

print('serve start')


start_new_thread(webcam,(encolosure_queue,))

while True:
    print('wait')
    client_socket,addr=server_socket.accept()
    start_new_thread(threaded(client_socket,addr,encolosure_queue,))


server_socket.close()
