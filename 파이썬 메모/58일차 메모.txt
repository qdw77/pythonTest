import tkinter as tk
from tkinter import messagebox
from tkinter import ttk
import sqlite3

# 데이터베이스 연결 설정
connection = sqlite3.connect('your_database.db')
cursor = connection.cursor()

# 테이블 이름과 책 이름을 입력받는 부분
root = tk.Tk()
root.title("데이터 관리")

# 테이블 이름 입력 필드
table_name_text = tk.Entry(root, width=25)
table_name_text.pack()
table_name_text.insert(tk.END, "테이블 이름 입력")

# 책 이름 입력 필드
book_name_text = tk.Entry(root, width=25)
book_name_text.pack()
book_name_text.insert(tk.END, "책 이름 입력")

# 추가할 저자 및 출판 연도 입력 필드
author_text = tk.Entry(root, width=25)
author_text.pack()
author_text.insert(tk.END, "저자 입력")

year_text = tk.Entry(root, width=25)
year_text.pack()
year_text.insert(tk.END, "출판 연도 입력")

# Treeview 위젯 설정 (표 형식으로 데이터 표시)
treeview = ttk.Treeview(root, columns=("Book Name", "Author", "Year"), show="headings")
treeview.heading("Book Name", text="책 이름")
treeview.heading("Author", text="저자")
treeview.heading("Year", text="출판 연도")
treeview.pack()

# 데이터베이스에서 선택한 데이터를 가져와서 Treeview에 표시
def select_table(table_name, book_name):
    cursor.execute(f"SELECT * FROM `{table_name}` WHERE book_name='{book_name}'")
    rows = cursor.fetchall()
    
    # 기존에 있는 데이터 삭제
    for row in treeview.get_children():
        treeview.delete(row)
    
    # 가져온 데이터 표시
    if rows:
        for row in rows:
            treeview.insert("", "end", values=row)
    else:
        messagebox.showerror("에러", "데이터가 없습니다.")

# 데이터 삭제 함수
def delete_data(table_name, book_name):
    cursor.execute(f"SELECT * FROM `{table_name}` WHERE book_name='{book_name}'")
    rows = cursor.fetchall()
    if rows:
        cursor.execute(f"DELETE FROM `{table_name}` WHERE book_name='{book_name}'")
        connection.commit()
        messagebox.showinfo("삭제 완료", "삭제 되었습니다.")
    else:
        messagebox.showerror("에러", "데이터가 없습니다.")

# 선택된 책 정보를 표시하는 함수
def show_select():
    table_name = table_name_text.get()
    book_name = book_name_text.get()
    
    if table_name and book_name:
        select_table(table_name, book_name)
    else:
        messagebox.showerror("에러", "테이블 이름과 책 이름을 입력하세요.")

# 데이터 삭제 버튼
def delete_selected_data():
    table_name = table_name_text.get()
    book_name = book_name_text.get()
    
    if table_name and book_name:
        delete_data(table_name, book_name)
    else:
        messagebox.showerror("에러", "테이블 이름과 책 이름을 입력하세요.")

# 데이터 등록 함수
def insert_data():
    table_name = table_name_text.get()
    book_name = book_name_text.get()
    author = author_text.get()
    year = year_text.get()

    # 입력 값이 모두 채워졌는지 확인
    if not table_name or not book_name or not author or not year:
        messagebox.showerror("에러", "모든 입력 필드를 채워주세요.")
        return  # 입력이 하나라도 없으면 함수 종료

    # SQL 쿼리 실행
    cursor.execute(f"INSERT INTO `{table_name}` (book_name, author, year) VALUES (?, ?, ?)", (book_name, author, year))
    connection.commit()
    messagebox.showinfo("등록 완료", "책 정보가 등록되었습니다.")

# 데이터 수정 함수
def update_data():
    table_name = table_name_text.get()
    book_name = book_name_text.get()
    author = author_text.get()
    year = year_text.get()

    # 입력 값이 모두 채워졌는지 확인
    if not table_name or not book_name or not author or not year:
        messagebox.showerror("에러", "모든 입력 필드를 채워주세요.")
        return  # 입력이 하나라도 없으면 함수 종료

    # 데이터가 존재하는지 확인
    cursor.execute(f"SELECT * FROM `{table_name}` WHERE book_name='{book_name}'")
    rows = cursor.fetchall()
    
    if rows:
        # SQL 쿼리 실행 (수정)
        cursor.execute(f"UPDATE `{table_name}` SET author=?, year=? WHERE book_name=?", (author, year, book_name))
        connection.commit()
        messagebox.showinfo("수정 완료", "책 정보가 수정되었습니다.")
    else:
        messagebox.showerror("에러", "수정할 책이 존재하지 않습니다.")

# 등록 버튼
insert_button = tk.Button(root, text="책 정보 등록", command=insert_data)
insert_button.pack()

# 수정 버튼
update_button = tk.Button(root, text="책 정보 수정", command=update_data)
update_button.pack()

# 선택한 책 정보 호출 버튼
select_button = tk.Button(root, text="선택한 책 정보 호출", command=show_select)
select_button.pack()

# 데이터 삭제 버튼
delete_button = tk.Button(root, text="선택한 책 삭제", command=delete_selected_data)
delete_button.pack()

root.mainloop()

https://helloworld-88.tistory.com/215 < 소켓

명령 프롬프트
ipconfig
IPv4 주소 . . . . . . . . . : 192.168.0.18 < ip 주소


#server
# 서버와 클라이언트 통신
# 클라이언트 사이드

# GUI + MySQL + CURD + 서버
# GUI : tkinter . ttk / QT > mysql , CRUD
# TCP & SOCKET : 통신 기반

# TCP transmisson control protocal로 통신 규칙
# TP 특징 : 인간 지향적 -> TCP 데이터를 보내기 전 서버와 클라이언트가 서로 확인 덜차 (3way 핸드세이크 )가 있음
# 3way 핸드세이크는 서로 확인 후 데이터에 대한 전송이 이루어짐
# 데이터 전송 신뢰성이 높다 : TCP 는 데이터가 정확히 전달 되조록 보장 해줌
# 예를 들어 데이터가 전송 중 끊기거나 잘못 전달되면 다시 보내는 등 처리를 함

# 순서를 보장 해줌(보내는 데이터가 엉키지 않도록)
# 보내고자 하는 데이터가 12345 인경우
# 여러 ㅘㄴ경적 이유 등으로 12345 등 데이터가 꼬이는 현상이 발생할 수 ㅣㅅ는 데 TCP는 이런 현상을 방지해줌

# 흐름제어
# (tick으로 양방향에서 박잘을 맞추는 것 처럼 서버가 클라이언트가 서로 데이터 송수신 과정을 소화할 수 있는 흐름으로 제어


# 3way handshake
# TCP 연결시 3웨이 핸드쉐이트 상세 과정
# 1.syn (송신자의 연결 요청)
# 2. syn-ack (수신자의 연결 요청 수락)
# 3. ack(송신자의 연결확인)

# TCP의 연결 종료시 4way handshake 과정으로 처리함
# 1. 한쪽에서 연결 종료 요청(FIN)
# 2. 상대방은 1번 요청을 확인(ACK)
# 3. 상대방도 종료 준비가 되면
# 3. 상대방도 종료 준비가 되면 연결 종료 요청을 보냄(FIN)
# 4. 송신자는 그 요청을 확인하고 연결을 완전히 종료 (ACK)


# 위 특징들로ICP는 데이터가 정확하고 손상없이 송수신과정에서 신회성을 보장받으며 통신할 수 있도록 하는 규약

import socketserver
import threading

HOST = 'localhost'
PORT=9900
lock=threading.Lock() #동기화 진행하는 스레드

class UserManager:
  def __init__(self):
    self.user={}
  def addUser(self,username,conn,addr):
    if username in self.user:
      conn.send("등록된 사용자".encode())
      return None

    lock.acquire()
    self.user[username]=(conn,addr)
    lock.release()

    self.sendMassageToAll('[%s]접속' % username)
    print('대화 참여 수 [%d]'% len(self.user))
    return username

  def removeUser(self,username):
    if username not in self.user:
      return

    lock.acquire()
    del self.user[username]
    lock.release()

    self.sendMassageToAll('[%s]접속해제'%username)
    print('대화 참여 수 [%d]'%len(self.user))

  def messageHandler(self,username,msg):

    if msg[0]!='/':
      self.sendMassageToAll('[%s] %s'%(username,msg))
      return
    if msg.strip()=='/quit':
      self.removeUser(username)
      return -1

  def sendMassageToAll(self,msg):
    for conn,addr in self.user.values():
      conn.send(msg.encode())


class myTcpHandler(socketserver.BaseRequestHandler):
  userman=UserManager()

  def handle(self):
    print(self,'self memory')
    print('client[%s]연결'%self.client_address[0])
    try:
      username=self.registerUsername()
      print(username,":username")
      msg=self.request.recv(1024) # recv(1024)는 버퍼(데이터를 받는 공간)사이즈 / 1024바이트까지 데이터를 읽겠다는 의미 / 클라이언트가 데이터를 1024이하로 보내면 그만큼만 읽고 1024이상 보내면 1024까지짤라서 읽고 그 이후 다시 recv로 받음
      print(self.request)
      print(self.client_address)
      print(self.server)
      while msg:
        print(msg.decode())
        if self.userman.messageHandler(username,msg.decode())==-1:
            self.request.close()
            break
        msg=self.request.recv(1024)
    except Exception as e:
      print(e)

    print('[%s]접속 종료'%self.client_address[0])
    self.userman.removeUser(username)

  def registerUsername(self):
    while True:
      self.request.send('ID'.encode())
      username = self.request.recv(1024).decode().strip()
     # username=username.decode().strip() < 두번 작성해놔서 안됐음 이제 주석처리 완료
      if self.userman.addUser(username,self.request,self.client_address):
        return username

class ChatingServer(socketserver.ThreadingMixIn,socketserver.TCPServer):
  pass

def runServer():
  try:
    server=ChatingServer((HOST,PORT),myTcpHandler)
    server.serve_forever()
  except KeyboardInterrupt:
    print('서버 종료')
    server.shutdown()
    server.server_close()
runServer()

# DATABASE : 프로젝트 데이터 관리

# 소켓

# check
import socket
from threading import Thread
import tkinter

tk=tkinter.Tk()
tk.geometry("1000x400")
entry=tkinter.Entry(tk)
entry2=tkinter.Listbox(tk,height=50,width=30)

HOST='192.168.0.2'
PORT=9900

def rcvMsg(sock):
  while True:
    try:
      data=sock.recv(1024)

      if not data:
        break
      print(data.decode())
      entry2.insert(-1,data.decode()+"\n")
      entry2.update()
      entry2.see(0)

    except:
      pass

def runChat():
  with socket.socket(socket.AF_INET,socket.SOCK_STREAM) as sock:
    sock.connect((HOST,PORT))
    t=Thread(target=rcvMsg,args=(sock,))
    t.daemon=True
    t.start()
    def onClick():
      sock.send(entry.get().encode())
    def onEnter(event):
      onClick()
      entry.delete(0,tkinter.END)
    entry2.pack(side=tkinter.LEFT,fill=tkinter.BOTH,padx=5,pady=5)
    label=tkinter.Label(tk,text='chat message')
    entry.pack()
    label.pack()
    btn=tkinter.Button(tk,text='확인',command=onClick)
    btn.pack()
    entry.bind("<Return>",onEnter)
    tk.mainloop()
runChat()

수정 점
import socketserver
import threading

HOST = 'localhost'
PORT = 9900
lock = threading.Lock()  # 동기화 진행하는 스레드

class UserManager:
    def __init__(self):
        self.user = {}  # 1번 코드에서는 'self.users'였지만, 2번 코드에서는 'self.user'로 이름이 변경됨
    def addUser(self, username, conn, addr):
        if username in self.user:  # 1번 코드에서는 'self.users'였음
            conn.send("등록된 사용자".encode())
            return None

        lock.acquire()
        self.user[username] = (conn, addr)  # 1번 코드에서는 'self.users'였음
        lock.release()

        self.sendMassageToAll('[%s]접속' % username)  # 1번 코드에서는 'sendMessageToAll'로 메소드 이름이 다름
        print('대화 참여 수 [%d]' % len(self.user))  # 1번 코드에서는 'self.users'였음
        return username

    def removeUser(self, username):
        if username not in self.user:  # 1번 코드에서는 'self.users'였음
            return

        lock.acquire()
        del self.user[username]  # 1번 코드에서는 'self.users'였음
        lock.release()

        self.sendMassageToAll('[%s]접속해제' % username)  # 1번 코드에서는 'sendMessageToAll'로 메소드 이름이 다름
        print('대화 참여 수 [%d]' % len(self.user))  # 1번 코드에서는 'self.users'였음

    def messageHandler(self, username, msg):

        if msg[0] != '/':
            self.sendMassageToAll('[%s] %s' % (username, msg))  # 1번 코드에서는 'sendMessageToAll'로 메소드 이름이 다름
            return
        if msg.strip() == '/quit':
            self.removeUser(username)
            return -1

    def sendMassageToAll(self, msg):  # 1번 코드에서는 'sendMessageToAll'로 메소드 이름이 다름
        for conn, addr in self.user.values():  # 1번 코드에서는 'self.users'였음
            conn.send(msg.encode())


class myTcpHandler(socketserver.BaseRequestHandler):
    userman = UserManager()

    def handle(self):
        print(self, 'self memory')
        print('client[%s]연결' % self.client_address[0])
        try:
            username = self.registerUsername()
            print(username, ":username")
            msg = self.request.recv(1024)  # recv(1024)는 버퍼(데이터를 받는 공간)사이즈 / 1024바이트까지 데이터를 읽겠다는 의미 / 클라이언트가 데이터를 1024이하로 보내면 그만큼만 읽고 1024이상 보내면 1024까지짤라서 읽고 그 이후 다시 recv로 받음
            print(self.request)
            print(self.client_address)
            print(self.server)
            while msg:
                print(msg.decode())
                if self.userman.messageHandler(username, msg.decode()) == -1:
                    self.request.close()
                    break
                msg = self.request.recv(1024)
        except Exception as e:
            print(e)

        print('[%s]접속 종료' % self.client_address[0])
        self.userman.removeUser(username)

    def registerUsername(self):
        while True:
            self.request.send('ID'.encode())
            username = self.request.recv(1024).decode().strip()  # 여기서 'decode().strip()' 두 번 호출이 있는 오류 있음.
            if self.userman.addUser(username, self.request, self.client_address):
                return username


class ChatingServer(socketserver.ThreadingMixIn, socketserver.TCPServer):
    pass


def runServer():
    try:
        server = ChatingServer((HOST, PORT), myTcpHandler)
        server.serve_forever()
    except KeyboardInterrupt:
        print('서버 종료')
        server.shutdown()
        server.server_close()

runServer()

> 선생님 코드 확인 후 체크 바람 선생님 코드가 1번임