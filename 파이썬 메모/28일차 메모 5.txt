class map:
  # 캐릭터, 맵 초기 정보, 현재맵정보, 틱제한, 적 리스트
  def __init__(self,c,f,n,t,l):
    self.c=c # 캐릭터 정보 # 받아와야 하는 정보?
    self.f=f # 맵 정보 초기
    self.n=n # 현재 맵
    self.t=t # 틱
    self.l=l # 적

    # 맵 초기 f
    # 맵 전체를 9개 구역으로 나눔()
    # 중앙에 보스는 고정 값
    # 나머지 구역 중 겹치지 않게 쫄/박스/캐릭터 배치

    # 초기화()
    #
    # initialize()  # 초기화
    # 맵 초기상태로 설정 (25x25)
    # 25x25 에서 각 칸마다
    # 먼저 빈칸인지 아닌지 정하고(30% 확률로 빈칸)
    # 빈칸이 아니면 체력 몇인 박스인지 만들기 (동일 확률로 1~3)
    #
    # 9개 구역에 3x3 구멍뚫기
    # 현재 맵 사이즈로 계산해서 빈칸으로 만들기
    #
    # 나머지 8개중 랜덤으로 6개 뽑아서 캐릭터랑 잡몹 넣기 (중복 ㄴ)
    # 캐릭터 인스턴스 생성
    # 몹들도 만들고(좌표값 전달) [보스(맵 사이즈), 쫄, 쫄,쫄,쫄,쫄]
    #
    # 현재틱 0틱 설정
    #
    #
    # 정보전달 3종류
    #
    # [w, w, a] wwa
    # [ture, false, true] tft
    #
    # 캐릭터 생성자로 넘길 정보([x좌표, y좌표])
    # 캐릭터한테줄정보
    # {
    # 현재틱: int
    # 물풍선맞음여부: bool
    # 적충돌횟수 : int # 이동입력값이랑 결과대로 했을 때 충돌하는 횟수
    # 먹은아이템 : Item
    # 이동입력값: list[str] (예: [‘w’, ‘w’, ‘a’])
    # 이동결과: list[bool] (예: [true, false, true])
    # 물풍선사용여부: bool
    # }
    #
    # 박스 생성자로 넘길 정보([x좌표, y좌표], 박스체력)
    # 박스한테줄정보
    # {
    # 현재 틱 : int
    #  물줄기맞음여부: bool
    # }
    #
    # 적 생성자로 넘길 정보(보스수, 보스좌표[], 잡몹수, 잡몹좌표[])
    # 적한테줄정보 / 각 적마다
    # info = {
    # 현재 틱: int
    # 물줄기맞음여부: bool
    # 이동가능여부(상하좌우): list[bool]  #[상, 하, 좌, 우]
    # }