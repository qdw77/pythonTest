함수 코드 양승준
최정윤 while키값
반복할땐 함수가 좋지만 그밖에는 별로

전체적으로 분석이 어려움 그러므로 주말동안 전체적인 코드 분석 및 키오스크 완성(토요일은 코드 분석 / 일요일은 완성)


재귀 함수

#20241210
# 재귀함수
# 메모화
# 조기리턴

# 팩토리얼 연산 n! = n * ( n - 1 ) * ( n - 2 )..........*1
# 해결 1. 반복문
# 해결 2. 재귀함수
# counter1=0
# def fac(n):
#     global counter1
#     output=1
#     for i in range(1,n+1):
#         output*=i
#         counter1 += 1
#
#     return output
#
# print("100!=",fac(3))
# print(counter1,"번이나 반복")
#
#
# def fac2(n): #3(첫 시작) #2(두번째) #1(세번째) #0(네번째)
#     if n==0:
#         return 1 #fac2 =1
#     else:
#         return n*fac2(n-1) # 3*fac2(2) > 3*2*fac2(1) > 3*2*1*fac2(0) >3*2*1*1
#
# # 재귀함수는 함수 본인이 본인을 호출하는 현태
# # 얼마나 같은 작업을 반복해야 끝이 날지 모르는 문제 해결
# # 호출 제안이 정해져 있음
#
# print(fac2(3))
#
# # 피보나치 수열(재귀함수로)
#
# def fibonacci(n):
#     if n ==1:
#         return 1
#     if n ==2:
#         return 1
#     else:
#         return fibonacci(n - 1)+ fibonacci(n - 2)
#
# # 개월수 >많은 수를 놓을수록 값이 매우 느리게 나옴
# print(fibonacci(30))
#
#
# # 파이썬 함수 내부에서 함수 외부에 있는 변수를 참조하지 못함
# # 외부에 있는 변수 사용하려면
# # 함수 내에 => global 변수명 선언을 해야함
# counter=0
# def fi(n):
#     print("fibo({})를 구한다.".format(n))
#     # 함수 밖 counter 변수를 참조 하겠다는 의미
#     global counter #선언만
#     counter+=1
#     if n==1:
#         return 1
#     if n==2:
#         return 1
#     else:
#         return fi(n-1)+fi(n-2)
#
# fi(20)
# print("----")
# print("fi(20)계산에 덧셈 횟수는 {}번".format(counter))
#
#
#
# # 301p
# dictionary={
#     1:1,
#     2:1
# }
#
# def fibonacci2(n):
#     if n in dictionary:
#         return dictionary[n] # 재귀함수 쓸때 매번 구하면 너무 오래걸리니까 단계 별로 딕셔너리에 저장해 놓아서 더 빠르게 끝낼 수 있다
#     else:
#         output = fibonacci2(n -1)+fibonacci2(n-2)
#         dictionary[n] = output
#         return output
# print(fibonacci2(35))
#


# 초가 55일 때까지 재귀 함수 , 찾으면 탈출 못 찾으면 재귀
import datetime
import sys
import time
sys.setrecursionlimit(10000)

# n=datetime.datetime.now()
# print(n.second)
# print(type(n.second))

now=datetime.datetime.now()
count=0
def fide(x):
    global count
    count+=1
    time.sleep(0.5)
    n = datetime.datetime.now()
    if x ==55:
        return count
    else:
        return fide(n.second)

print(fide(now.second))