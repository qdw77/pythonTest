1. 거래처 관련 테이블
🏢 clients (거래처 테이블)
거래처 정보를 관리하는 테이블입니다.

sql
복사
편집
CREATE TABLE clients (
    client_id      INT AUTO_INCREMENT PRIMARY KEY, -- 거래처 ID
    name          VARCHAR(255) NOT NULL,           -- 거래처 이름
    contact_name  VARCHAR(255),                    -- 담당자 이름
    phone         VARCHAR(50),                     -- 연락처
    email         VARCHAR(255),                    -- 이메일
    address       TEXT,                            -- 주소
    created_at    TIMESTAMP DEFAULT CURRENT_TIMESTAMP, -- 생성일
    updated_at    TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP -- 수정일
);
📝 client_transactions (거래 내역 테이블)
각 거래처와의 거래 내역을 저장합니다.

sql
복사
편집
CREATE TABLE client_transactions (
    transaction_id INT AUTO_INCREMENT PRIMARY KEY, -- 거래 내역 ID
    client_id      INT NOT NULL,                   -- 거래처 ID (FK)
    order_id       INT,                            -- 판매 주문 ID (FK, 필요 시)
    amount         DECIMAL(15, 2) NOT NULL,        -- 거래 금액
    transaction_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP, -- 거래 날짜
    notes          TEXT,                           -- 비고
    FOREIGN KEY (client_id) REFERENCES clients(client_id) ON DELETE CASCADE
);
2. 영업 관리 테이블
🛒 sales_orders (판매 주문서 테이블)
판매 주문 정보를 저장하는 테이블입니다.

sql
복사
편집
CREATE TABLE sales_orders (
    order_id       INT AUTO_INCREMENT PRIMARY KEY, -- 판매 주문서 ID
    client_id      INT NOT NULL,                   -- 거래처 ID (FK)
    order_date     TIMESTAMP DEFAULT CURRENT_TIMESTAMP, -- 주문 날짜
    total_amount   DECIMAL(15,2) NOT NULL,         -- 총 주문 금액
    status         ENUM('pending', 'completed', 'canceled') DEFAULT 'pending', -- 주문 상태
    created_at     TIMESTAMP DEFAULT CURRENT_TIMESTAMP, 
    updated_at     TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP, 
    FOREIGN KEY (client_id) REFERENCES clients(client_id) ON DELETE CASCADE
);
📦 sales_order_items (판매 주문 상세 테이블)
각 판매 주문서에서 판매된 상품의 상세 정보입니다.

sql
복사
편집
CREATE TABLE sales_order_items (
    item_id       INT AUTO_INCREMENT PRIMARY KEY, -- 판매 아이템 ID
    order_id      INT NOT NULL,                   -- 판매 주문서 ID (FK)
    product_id    INT NOT NULL,                   -- 제품 ID (FK)
    quantity      INT NOT NULL,                    -- 수량
    unit_price    DECIMAL(15,2) NOT NULL,          -- 단가
    total_price   DECIMAL(15,2) NOT NULL,          -- 총 가격 (수량 * 단가)
    FOREIGN KEY (order_id) REFERENCES sales_orders(order_id) ON DELETE CASCADE
);
📊 sales_performance (판매 실적 테이블)
영업사원의 판매 실적을 관리하는 테이블입니다.

sql
복사
편집
CREATE TABLE sales_performance (
    performance_id INT AUTO_INCREMENT PRIMARY KEY, -- 실적 ID
    employee_id    INT NOT NULL,                   -- 영업 담당자 ID (FK)
    order_id       INT NOT NULL,                   -- 판매 주문서 ID (FK)
    sales_amount   DECIMAL(15,2) NOT NULL,         -- 실적 금액
    sales_date     TIMESTAMP DEFAULT CURRENT_TIMESTAMP, -- 판매 날짜
    FOREIGN KEY (employee_id) REFERENCES employees(employee_id) ON DELETE CASCADE,
    FOREIGN KEY (order_id) REFERENCES sales_orders(order_id) ON DELETE CASCADE
);
3. 발주 관리 테이블
🏷️ purchase_orders (발주서 테이블)
발주 정보를 저장하는 테이블입니다.

sql
복사
편집
CREATE TABLE purchase_orders (
    purchase_id    INT AUTO_INCREMENT PRIMARY KEY, -- 발주서 ID
    supplier_id    INT NOT NULL,                   -- 공급업체 ID (FK)
    order_date     TIMESTAMP DEFAULT CURRENT_TIMESTAMP, -- 발주 날짜
    total_amount   DECIMAL(15,2) NOT NULL,         -- 총 발주 금액
    status         ENUM('pending', 'completed', 'canceled') DEFAULT 'pending', -- 발주 상태
    created_at     TIMESTAMP DEFAULT CURRENT_TIMESTAMP, 
    updated_at     TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP, 
    FOREIGN KEY (supplier_id) REFERENCES suppliers(supplier_id) ON DELETE CASCADE
);
📋 purchase_order_items (발주 상세 테이블)
각 발주서에서 발주된 상품의 상세 정보입니다.

sql
복사
편집
CREATE TABLE purchase_order_items (
    item_id       INT AUTO_INCREMENT PRIMARY KEY, -- 발주 아이템 ID
    purchase_id   INT NOT NULL,                   -- 발주서 ID (FK)
    product_id    INT NOT NULL,                   -- 제품 ID (FK)
    quantity      INT NOT NULL,                    -- 수량
    unit_price    DECIMAL(15,2) NOT NULL,          -- 단가
    total_price   DECIMAL(15,2) NOT NULL,          -- 총 가격 (수량 * 단가)
    FOREIGN KEY (purchase_id) REFERENCES purchase_orders(purchase_id) ON DELETE CASCADE
);