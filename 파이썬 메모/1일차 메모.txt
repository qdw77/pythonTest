헤커튼 
레포트 접목 정리 
파이썬/java
출결


타자연습
https://www.typingtest.com/

래포트


[ 경험
vscode
mysql
전자정부프레임워크
이클립스
]

------------------------------------------------------------------------


오래된 기계의 프로그램의 결과물은 펌웨어 - C언어 사용(근본/빠름)
소프트웨어 - 파이썬(생상성/느림)

범용성 파이썬
대부분 운영체계에서 사용 가능

환경차이 
거대한 게임> C, C++, C#

사용
C C++ 10%(대체 언어X)
파이썬 45%
java 45%

파이썬(주언어)

java


frontend 
html
css
javascript


backend
java
python
+프레임워크/라이브러리

PyCharm Community Edition

(이름).py 
.py = 압축방식(확장자)

1. print("Python Programming")
2. 10+20

1. >
C:\Users\301-10\PycharmProjects\PythonProject\.venv\Scripts\python.exe C:\Users\301-10\PycharmProjects\PythonProject\20241121.py 

Python Programming

Process finished with exit code 0

숫자 0이 오류 x

2> 노란줄로 출력 x



키워드는 주황색
print는 보라색(식별자)
숫자나 ""는 초록색


키워드는 그대로 냅두고 파이썬은 대소문자 구분

키워드 목록
import  keyword
print(keyword.kwlist)

호출시 키워드 리스트 출력
'False', 'None', 'True', 'and', 'as', 'assert', 'async', 'await', 'break', 'class', 'continue', 'def', 'del', 'elif', 'else', 'except', 'finally', 'for', 'from', 'global', 'if', 'import', 'in', 'is', 'lambda', 'nonlocal', 'not', 'or', 'pass', 'raise', 'return', 'try', 'while', 'with', 'yield'

------------------------------------------------------------------------

# #은 주석 처리
#변수, 저장 공간
#변수 생성에 식별자(a/b) 사용 (id값 / 키워드랑 겹치지 않게 할 것)
a=10
#ex)false 와 False는 다르기 때문에 식별자 false 사용 가능
b=20
# =(대입), ==(같다)
print(a+b)
#30출력

------------------------------------------------------------------------

#식별자 규칙
#1. 키워드 사용 금지
#2. 특수 문자느 _ 만 사용 가능
#3. 숫자로 시작 금지
#4. 공백 포함 금지
#5. 한국어 변수 금지(무조껀 영어로)
#6. 대소문자 구분

a=10
A=100
print(a)
print(A)
# 10
# 100 출력

------------------------------------------------------------------------

# 구별 가능 식별자

# 연산자 +,-,* 등 해당

#출력자
print(1+1)
# 2 출력

------------------------------------------------------------------------

print(52)
print(273)
print(52,273,"Hello")
#52
#273
#52 273 Hello 출력


print(52)
print(273)
print(52,273,"Hello")
print() #엔터 역할
print(123)

#52
#273
#52 273 Hello

#123출력


------------------------------------------------------------------------

# 하나만 출력합니다.
print("# 하나만 출력합니다.")
print("Hello Python Progeamming...!")
print() #엔터 역할

# 여러 개를 출력합니다.
print("# 여러 개를 출력합니다.")
print(10, 20, 30, 40, 50)
print("안녕하세요","저의","이름은","윤인성입니다!")
print() #엔터 역할

# 아무것도 출력하지 않습니다.
print("# 아무것도 출력하지 않습니다.")
print("--- 확인 전용선---")
print() #엔터 역할
print() #엔터 역할
print("--- 확인 전용선---")

>출력
# 하나만 출력합니다.
Hello Python Progeamming...!

# 여러 개를 출력합니다.
10 20 30 40 50
안녕하세요 저의 이름은 윤인성입니다!

# 아무것도 출력하지 않습니다.
--- 확인 전용선---


--- 확인 전용선---

------------------------------------------------------------------------

print(type("안녕하세요.")) #str문자열
print(type(273)) #int정수

#안쪽 type 이후 바깥쪽 출력
<class 'str'> #str문자열
<class 'int'> #int정수

------------------------------------------------------------------------

A(B(C(100)))
중첩된 것은 제자리에 결과값이 있다.

C > 
A(B())
>A()


type B


#print(type(print(123)))
#print("<class 'NoneType'>")

------------------------------------------------------------------------

# 문자열 데이터를 만드는 방법에는 따옴표로 감싸 표현

123 #숫자열데이터
"123"#문자열데이터

'hello'
"hello"
# 작은 따옴표 문자열/큰 따옴표 문자열 둘다 사용이 가능하다.
print('"안녕하세요."라고 말했다.')
# 이렇게 두개를 사용 시에는 각각 다른 따옴표로 사용

#이스케이프 코드
#작은 따옴표, 큰 따옴표를 쉽게 넣는 법
#\(역슬레시) > 이스케이프 코드는 역슬래시+문자
#\"

print("\"안녕하세요\"라고 말했다.")
#\n 줄바꿈
#\t 탭 효과

print("안녕\n하세요.")
print("안녕\t하세요.")

print("안녕하세\\요.")
print("\\ \\ \\ \\")

>출력
"안녕하세요"라고 말했다.
안녕
하세요.
안녕	하세요.
안녕하세\요.
\ \ \ \

------------------------------------------------------------------------

print("안녕하세요안녕하세요안녕하세요안녕하세요안녕하세요"
      "안녕하세요안녕하세요안녕하세요안녕하세요안녕하세요안녕하세요안녕하세요")
print()
print("""안녕하세요안녕하세요안녕하세요안녕하세요안녕하세요안녕하세요안녕하세요안녕하세요
안녕하세요안녕하세요안녕하세요안녕하세요""")

>출력
안녕하세요안녕하세요안녕하세요안녕하세요안녕하세요안녕하세요안녕하세요안녕하세요안녕하세요안녕하세요안녕하세요안녕하세요

안녕하세요안녕하세요안녕하세요안녕하세요안녕하세요안녕하세요안녕하세요안녕하세요
안녕하세요안녕하세요안녕하세요안녕하세요

------------------------------------------------------------------------

#+ - * / 연산자
#문자열에도 연산자를 적용가능
#문자열의 + 연산 : 문자열의 연결

print("안녕"+"하세요?")#문자열 + 문자열 가능
#print("안녕하세요"+1) #문자열의 + 연산은 문자열과 문자열을 대상으로 가능(숫자x)

#문자열의 * 연산
#문자열의 반복
print("301"*301)# 문자열 * 숫자 가능
print(10*"#")# 숫자*문자열 가능

>출력
안녕하세요?

##########

------------------------------------------------------------------------

#문자 선택 연산자 : 이덱싱[]
#문자 선택 연산자는 문자열 내부의 특정 하나의 문자만 선택하는 연산자
#대괄호 안에 선택할 문자의 번호를 입력
#위 문자의 번호를 인덱스 번호라고 표현

#인덱스 번호는 [0]부터
print("301호"[0]) #0번째 자리 단어
print("301호"[3]) #3번째 자리 단어
print("3 01호"[3]) #3번째 자리 단어

#출력 
#3
#호
#1

#인덱스 번호는 뒤에서 -1부터 시작 가능
print("203호"[-2]) #뒤에서 2번째 자리 단어

#출력
#3

#문자열의 슬라이싱 [부터:까지] >특정구간 빼내기
#부터(포함) 까지(제외)
#1부터 3전까지
#1부터 2까지 포함
#1이상 3미만
#[시작:끝]

print("안녕하세요"[1:3])
#출력 
#녕하

#[ : ]
#시작 칸을 비우면 0의미
#끝칸을 비우면 끝의미
print("안녕하세요."[:])
print("안녕하세요."[2:])
print("안녕하세요."[:2])

#출력
#안녕하세요.
#하세요.
#안녕

# print("안녕"[9]) index out of range

------------------------------------------------------------------------

#문자열 길이 확인
#len()
print(len("안녕하세요."))
print(type(len("안녕하세요.")))
print(type(type(len("안녕하세요."))))
# len("안녕하세요.") = 6 > (type(len("안녕하세요.")) = int(type개체의 값) > type(type(len("안녕하세요."))) = type

#출력 
#6
#<class 'int'>
#<class 'type'>

#대입/할당
x="엑스"
print(x)
print(type(x))

#출력
# 엑스
# <class 'str'>

------------------------------------------------------------------------

# 소수점이 없는 숫자 정수형
# 소수점이 있는 숫자 실수형
# 소수점이 움직이는 숫자를 부동 소수점
#정수 int / 부동소수점(실수) float

print(type(30))
print(type(30.0))

#출력
# <class 'int'>
# <class 'float'>

print(0)
print(0.0)

#출력
# 0
# 0.0

#숫자연산자 + - * /
#숫자연산은 숫자끼리
print("5+7=",5+7)
print("5-7=",5-7)
print("5*7=",5*7)
print("5/7=",5/7)

#출력
# 5+7= 12
# 5-7= -2
# 5*7= 35
# 5/7= 0.7142857142857143

# 정수 나누기 연산자 //
# 숫자를 나누고 소수점 이하의 자릿수를 떼어 버린 후 정수 부분만 남김
# 몫

# 나머지 연산자 % > 짝수 홀수 만들 때 ex)스위치 제작 시 쉬운 방법이 짝수 홀수
print(11%3)
print()

#출력
# 2

# 제곱 연산자 **
print(10**2)

#출력
# 100

#연산자의 우선 순위

print("안녕"+"하세요"*3)
print()
print(("안녕"+"하세요")*3)
print()
print("안녕"+("하세요"*3))

#출력
# 안녕하세요하세요하세요
#
# 안녕하세요안녕하세요안녕하세요
#
# 안녕하세요하세요하세요

------------------------------------------------------------------------

# 변수 > 모든 자료형을 저장 가능
# 참조/조회 변수를 본다.
#x는 보는 것(구역 이름이 x)
x=123
print(x)

#출력
#123

a=100
b=5
print(a+b)

#출력
#105

a
# 그냥 a만 적어도 확인만 불가능할 뿐 컴퓨터는 확인했음

#print(a +"안녕") > unsupported operand type(s) for +: 'int' and 'str'

# 변수 선언 & 할당
pi = 3.14159265
r=10

#변수 참조
print("원주율 =", pi)
print("반지름 =", r)
print("원의 둘레", 2*pi*r)
print("원의 넓이 =", pi * r * r)

#출력
#원주율 = 3.14159265
#반지름 = 10
#원의 둘레 62.831853
#원의 넓이 = 314.159265

p115