https://www.comcbt.com/cbt/s_view2.php < 정보처리기사 기출 문제집

import pymysql
def XXX(sql):
  connection = pymysql.connect(  # 연결 객체 초기화
    host='localhost', # 접속하려는 주소 ip 지정
    user='root', # 해당 ip에 mysql 서버 계정
    password='0000', # 해당 계정의 pw
    database='market_db', # 접속하려는 DB이름
    port=3306 # 포트 번호
  )

  cursor = connection.cursor()
  cursor.execute(sql)

  # commit 이전 작업까지 정상적으로 처릴 확정 (조회에는 필요없으나 데이터에 변동이 생기는 경우에만 필요)

  tables=cursor.fetchall() # 실행한 쿼리를 모두 가져옴
  print("market_db 내 table 정보")

  for table in tables:
    print(table[0])

  cursor.close() # 커서 객체를 닫는다
  connection.close() # SQL서버 연결 객체를 닫는다

# member_connection = pymysql.connect(
#   host='localhost',  # 접속하려는 주소 ip 지정
#   user='root',  # 해당 ip에 mysql 서버 계정
#   password='0000',  # 해당 계정의 pw
#   database='301_member',  # 접속하려는 DB이름
#   port=3306  # 포트 번호
# )
# mysql_member = member_connection.cursor()

# 테이블 삭제
# mysql_member.execute("DROP TABLE member")
# mysql_member.execute("DROP TABLE book")

# 테이블 생성
# PRIMARY KEY 는 PRIMARY KEY가 될 컬럼 바로 뒤에 지정
# member="CREATE TABLE member(member_name CHAR(4) PRIMARY KEY, member_phone CHAR(20) NULL, member_age CHAR(2) NULL)"
# book="CREATE TABLE book(member_name CHAR(4) PRIMARY KEY, book_name VARCHAR(100) NULL, book_writer VARCHAR(15) NULL, book_publisher VARCHAR(10) NULL)"
# mysql_member.execute(book)

# 칼럼만 추가
# book_table="ALTER TABLE book ADD book_num VARCHAR(20) NULL"
# mysql_member.execute(book_table)

# 컬럼 내 데이터(정보)
# mysql_member.execute("INSERT INTO member VALUES ('',null,null)")
# ex)INSERT INTO member VALUES ('박은주',null,null) >
# member_connection.commit() < mysql에 저장

# 칼럼 내 데이터(정보) 삭제
# mysql_member.execute("DELETE FROM book WHERE(member_name='박은주')")

# 칼럼 내 데이터(정보) 추가
# mysql_member.execute("INSERT INTO book VALUES('박은주','혼자 공부하는 머신러닝+딥러닝,혼자 공부하는 SQL,스프링 부트3,기후변화 데이터북,에너지 데이터 경영론,쉽게 배우는 파이썬 데이터 분석, 이것이 자바다 2권',NULL,NULL)")
# mysql_member.execute("INSERT INTO book VALUES('강성욱',NULL,NULL,NULL,NULL)")
# mysql_member.execute("INSERT INTO book VALUES('권태희',NULL,NULL,NULL,NULL)")
# mysql_member.execute("INSERT INTO book VALUES('김동현',NULL,NULL,NULL,NULL)")
# mysql_member.execute("INSERT INTO book VALUES('김준섭',NULL,NULL,NULL,NULL)")
# mysql_member.execute("INSERT INTO book VALUES('김진범',NULL,NULL,NULL,NULL)")
# mysql_member.execute("INSERT INTO book VALUES('김태연',NULL,NULL,NULL,NULL)")
# mysql_member.execute("INSERT INTO book VALUES('박민환',NULL,NULL,NULL,NULL)")
# mysql_member.execute("INSERT INTO book VALUES('성진하',NULL,NULL,NULL,NULL)")
# mysql_member.execute("INSERT INTO book VALUES('송기윤',NULL,NULL,NULL,NULL)")
# mysql_member.execute("INSERT INTO book VALUES('양승준',NULL,NULL,NULL,NULL)")
# mysql_member.execute("INSERT INTO book VALUES('이윤서',NULL,NULL,NULL,NULL)")
# mysql_member.execute("INSERT INTO book VALUES('최정윤',NULL,NULL,NULL,NULL)")

# 칼럼 내 데이터 업데이트
# book_update="UPDATE book SET book_num=7 WHERE member_name='박은주'"
# mysql_member.execute(book_update)

# member_connection.commit()  # .commit 이전 작업까지 정상적으로 처릴 확정 (조회에는 필요없으나 데이터에 변동이 생기는 경우에만 필요)


ERP
파이썬 
GUI 프로그래밍

C# < 

gui를 만들 수 있는 tcl / tk

https://seamless.tistory.com/42 < 병렬성 / 동시성
https://m.blog.naver.com/kangyh5/223204656770 < 스레드와 코어
https://jerryjerryjerry.tistory.com/184 < 스레드 장단점

egovframework > MySQL

간단한 채팅창 제작 실습

파이참 다시 설치
git 설치 후 깃허브 올리기 시도

tkinter 로 채팅창 제작 < 앱 카피 중간 프로젝트 5천줄
와이어 프레임 제작

CREATE TABLES  IF NOT EXISTS 테이블명
[출처] MySQL DataBase / Table 존재 확인|작성자 가다보면

SHOW TABLES LIKE '테이블명';

CREATE DATABASE IF NOT EXISTS DB명
[출처] MySQL DataBase / Table 존재 확인|작성자 가다보면

SHOW TABLES IN 디비명 LIKE '테이블명';

SELECT EXISTS (
  SELECT 1 FROM Information_schema.tables 
  WHERE table_schema = 'DB명' 
  AND table_name = '테이블명' 
) AS flag < flag=1 <있음 / flag=0 없음

# text_box=tk.Text(root,height=5,width=30)
# text_box.pack();

def show_text():
#   text_content=text_box.get("1.0","end-1c") #텍스트 박스의 값을
#   # 텍스트 박스의 값을 가져온다
#   # get(start,end)메서드
#   # start: 텍스트를 가져오고자 하는 시작 위치
#   # end: 텍스트를 가져오고자 하는 끝 위치
#   # 위 두 매개변수를 통해  text 위젯에서 인덱스 형태로 위치 값을 가져온다
#   # 1.0 1번째 줄의 0번째 문자를 의미
#   # end-1c: 마지막 줄의 마지막 문자 앞을 의미
#   label.config(text=f"입력된 텍스트:\n{text_content}")
#
# button=tk.Button(root,text="text보기",command=show_text)
# button.pack()


# # 20250218
# #GUI.py
# # https://docs.python.org/3/library/tkinter.html < 표준 파이썬
#
# # import tkinter as tk
# #
# # root=tk.Tk()
# # root.title("sample")
# # label=tk.Label(root,text="test",font=("Arial",20))
# # label.pack()
# #
# # def change_test():
# #   label.config(text="click")
# #
# # button=tk.Button(root, text='클릭',command=change_test,font=("Arial",15))
# # button.pack(pady=20)
# # root.mainloop()
#
# # tkinter 은 파이썬에서 gui 애플리케이션을 만들기 위한 표준 라이브러리
# # tkinter에서 제공하는 컨트롤
# # tkinter에서 이벤트 바인딩 연결방법
# # 멀티스레드 / 이벤트 처리 방법
#
# # tkinter를 이용한 UI 개발 첫 단계 : 메인프레임(메인윈도우,toplevel) 생성 tk.TK()
# # 위젯 생성: 버튼,레이블,텍스트박스,콤보박스,슬라이더 등 여러 컨트롤 생성 tk.Button()
# # 이벤트 처리: 사용자의 입력 행위에 따라 발생하는 이벤트 핸들러/이벤트 리스너/ 이벤트 바인딩 함수 호출 처리
# # 메인 루프 구동 특성 이해: 스레드를 잡아놓는다 / 메인 스레드를 배치시켜줘야 한다. / 프로세스 일꾼
#
# import tkinter as tk
#
# from uri_template import expand
#
# root=tk.Tk() # root는 변수 이름
# root.title("123")
#
# # tkinter로 개발하는 GUI프로세스는 1개당 1개의 mainloop()가 있어야 함
# # 메인 프레임 생성
#
# label=tk.Label(root,text="기본라벨")
# # label위젯의 생성
# # 배치를 따로 해야한다
# label.pack() # pack을 통한 화면에 위젯 배치
# def on_button_click():
#   label.config(text="클릭되었음")
# button=tk.Button(root,text='클릭',command=on_button_click) # command에는 함수를 바인딩 해준다(함수 호출 x)
# button.pack()
#
# ent=tk.Entry(root)
# ent.pack()
#
# def show_entry():
#   user_input=ent.get()
#   label.config(text=f"입력된 텍스트:{user_input}")
#
# button=tk.Button(root,text="입력값 보기",command=show_entry)
# button.pack()
# # entry: 사용자 입력창
#
# text_box=tk.Text(root,height=5,width=30)
# text_box.pack()
#
# def show_text():
#   text_content=text_box.get("1.0","end-1c") #텍스트 박스의 값을
#   # 텍스트 박스의 값을 가져온다
#   # get(start,end)메서드
#   # start: 텍스트를 가져오고자 하는 시작 위치
#   # end: 텍스트를 가져오고자 하는 끝 위치
#   # 위 두 매개변수를 통해  text 위젯에서 인덱스 형태로 위치 값을 가져온다
#   # 1.0 1번째 줄의 0번째 문자를 의미
#   # end-1c: 마지막 줄의 마지막 문자 앞을 의미
#   label.config(text=f"입력된 텍스트:\n{text_content}")
#
# button=tk.Button(root,text="text보기",command=show_text)
# button.pack()
#
# # checkbutton 위젯
# check_var=tk.BooleanVar() # BooleanVar는 T/F 값으로 체크 박스의 상태 관리
# checkbutton = tk.Checkbutton(root,text="true",variable=check_var)
# # variable: check_var라는 boolvar 변수 연동
# checkbutton.pack()
#
# def check_status():
#   if check_var.get():
#     label.config(text="체크박스 선책됨")
#   else:
#     label.config(text="선택 풀림")
#
# button=tk.Button(root,text="TF변환체크",command=check_status)
# button.pack()
#
# select_option=tk.StringVar() # 선택 값을 지정할 변수 선언
#
# def show_radio_selection():
#   label.config(text=f"라디오 선택 옵션:{select_option.get()}")
#
# radiobutton1=tk.Radiobutton(root,text="옵션1",variable=select_option,value="옵션1")
# radiobutton1.pack()
#
# radiobutton2=tk.Radiobutton(root,text="옵션2",variable=select_option,value="옵션2")
# radiobutton2.pack()
# # radiobutton 1과 2의 variable에는 똑같이 selected option이라는 tk.StringVar가 연결되어 있다
# # 이것이 의미하는 것은 라디오 버튼 1과 2는 하나의 '그룹화'되어 있다는 의미
# # 라디오 버튼: 여러 옵션 중 하나를 선택할 수 있는 라디오 버튼 그룹
#
#
# button=tk.Button(root,text='선택확인',command=show_radio_selection)
# button.pack()
#
# # 리스트 박스 위젯
# listbox=tk.Listbox(root) #여러 항목을 선택할 수 있는 리스트 박스
# listbox.pack()
#
# for item in ['항목1','항목2','항목3']:
#   listbox.insert(tk.END,item)
#
# def show_selected_item():
#   selected_item=listbox.get(listbox.curselection())
#   label.config(text=f"선택된 항목:{selected_item}")
#
# button=tk.Button(root,text="선택 항목 보기",command=show_selected_item)
# button.pack()
#
# # scale 위젯
# # 사용자가 슬라이더를 조작하여 값을 선택하는 위젯
# scale=tk.Scale(root,from_=0,to=100,orient=tk.HORIZONTAL)
# scale.pack()
#
# def show_scale_value():
#   value=scale.get() #슬라이더가 어떤 값인지
#   label.config(text=f"슬라이더 값:{value}")
#
# button=tk.Button(root,text="슬라이더 값 확인",command=show_scale_value)
# button.pack()
#
#
# spinbox=tk.Spinbox(root,from_=1,to=10) #1~10 사이의 값 선택 가능한 스핀 박스 생성
# spinbox.pack()
#
# def show_spinbox_value():
#   value=spinbox.get()
#   label.config(text=f"spinbox값:{value}")
#
# button=tk.Button(root,text="spinbox 값보기",command=show_spinbox_value)
# button.pack()
#
# # 스크롤바 위젯 생성
# # 스크롤바는 텍스트나 리스트 박스에 내용이 width height 넘어갈 때 처리
# scrollbar=tk.Scrollbar(root)
# scrollbar.pack(side=tk.RIGHT,fill=tk.Y) # 스크롤바를 오른쪽에 세로로 배치
#
# listbox=tk.Listbox(root,yscrollcommand=scrollbar.set)
# # 리스트 박스의 생성 및 스크롤바와 바인딩
# listbox.pack(side=tk.LEFT,fill=tk.BOTH,expand=True)
# # 리스트 박스를 왼쪽에 배치하고 크기(fill) 조정
# for i in range(50): # 50개 항목 리스트 박스에 추가
#   listbox.insert(tk.END,f"항목{item}")
#
# scrollbar.config(command=listbox.yview)
# # 스크롤바와 리스트박스를 바인딩해서 스크롤 가능하게 연결
#
#
# # menu 위젯
# # 메뉴 위젯은 애플리케이션 메뉴 만들 떄 사용, 상단 메뉴바, 컨텍스트 메뉴 등
#
# def new_file():
#   label.config(text='새 파일 생성')
#
# def save_file():
#   label.config(text="파일 저장")
#
# def open_file():
#   label.config(text="파일 열기")
#
#
# menu_bar=tk.Menu(root) # 메뉴바 위젯 생성
#
# file_menu=tk.Menu(menu_bar,tearoff=0) # 파일 메뉴 생성(tearoff=0 : 분리되는
# # tearoff=1 메뉴의 상단에 작은 점선 라인 생성
# # 점선 라인 클릭시 메뉴 분리(떼어내기) 가능
#
# # tearoff =0
# # 메뉴에서 점선 사라짐 메뉴 분리 안됨
# # 항상 한곳에서 사용하도록 강제
# file_menu.add_command(label="새로만들기",command=new_file) # 새로 만들기 메뉴바
# file_menu.add_command(label="열기",command=open_file) # 열기 추가
# file_menu.add_command(label="저장",command=save_file) # 저장 추가
# menu_bar.add_cascade(label="파일",menu=file_menu) # 파일 메뉴를 메뉴바에 추가
#
# root.config(menu=menu_bar) # 메뉴 바를 루트 창(메인창)에 설정
#
#
# # Toplevel 탑 레벨은 새로운 창을 생성하는 위젯
# # 메인창 외에 추가적인 대화 상자나 새창을 띄울 떄 사용
#
# def open_new_window():
#   # 보기엔 아닌 것 같아도 root에 소속
#   new_window=tk.Toplevel(root)
#   new_window.title("새 창")
#   new_window.geometry("200x150")
#   label_in_new_window=tk.Label(new_window,text="새창 라벨")
#   label_in_new_window.pack()
#
# button = tk.Button(root,text="새 창 열기",command=open_new_window)
# button.pack()
#
#
# # canvas 위젯
# # 캔버스 위젯은 그림을 그리거나 도형 그리거나 그래픽 작업에 사용
#
# canvas = tk.Canvas(root,width=400,height=300,bg='white')
# canvas.pack()
#
# canvas.create_rectangle(50,50,150,150,fill='blue')
# canvas.create_oval(200,50,300,150,fill='red')
# canvas.create_line(50,200,350,200,fill='green',width=3)
#
#
# # message 위젯
# # 메세지 위젯은 긴 텍스트를 자동으로 줄바꿈 해주는 위젯
# # 일반적인 label 위젯과 비슷하지만 긴 텍스트 처리에 적합하다
# message=tk.Message(root,text="자동 줄바꿈이 되는 텍스트 123123입니다. 긴 텍스트 처리에 적합하다ㅏㅏㅏㅏㅏ",width=300)
# message.pack()
#
#
# root.mainloop() # main 루프는 가장 마지막 코드에 작성

# import tkinter as tk
# from tkinter import ttk
# # tk 및 ttk는 다름
#
# root=tk.Tk()
# root.title("ttk 버튼")
# def on_button_click():
#   print("button clicked")
#
# button=ttk.Button(root,text="click",command=on_button_click)
# button.pack(padx=10,pady=10)
# root.mainloop()


# 1. pack()으로 물리적 선언 구조 순으로 레이아웃에 올리는 방법 [간단한 static방식을 배치)
#   pack 배치의 매개변수 side: top/bottom/left/right 으로 위젯 위치 지정 가능
#   pack 배치의 매개변수 fill: 위젯이 부모 컨테이너에서 차지할 공간 확장 방법 설정으로 NONE/X/Y/BOTH 방향성으로 확장 가능
#   pack 배치의 매개변수 expand: 부모 컨테이너에서 남은 공간을 위젯이 확장할 수 있도록 설정하는 옵션으로 True 또는 False
#   pack 배치의 매개변수 padx/pady: 수평여백과 수직 여백 속성이고 값으로 숫자를 대입한다
#   pack 배치의 매개변수 anchor: 위젯 내 텍스트나 내용이 위치할 위치 지정 속성으로 center/n/s/w/e 지정 가능
#   pack 배치의 매개변수 borderwidth: 테두리 두께로 숫자 지정
#   pack 배치의 매개변수 width/height: 너비 높이 숫자 지정
#   pack 배치의 매개변수 relief: 테두리 모양 속성으로 solid/flat/sunken 등 값으로 사용

# 2. grid() 위젯을 행과 열로 구성된 격자에 배치시키는ㄴ 방법 [표 형식의 배치]
#       ex) button.grid(row=0,column=1)
#           button2.grind(row=0,column=2)

# 3. place()를 통한 절대 좌표에 의한 배치 방식 [ 좌표 기반 배치 ]
#        ex) label1.place(x=50,y=50)
#            label2.place(x=150,y=100)

# 위 3가지 배치 방식은 혼동하여 쓰지 않도록 한다, 배치 방식의 충돌 가능성 있음.
# 하나의 window에 대한 위젯 배치 방식은 하나의 방식으로 쓰도록 함

# GUI + DB MYSQL 연습 문제

# 검색/생성/삭제 실습
# GUI 프로그램을 통해 MYSQL 서버의 데이터 베이스 생성 및 수정 관리할 수 있도록 구현한다

# 1. DB 생성 및 생성한 데이터 USE 설정 

# 2. 테이블의 생성
#    > 테이블이 이미 존재하는 지 검사 후 없으면 생성, 이미 있으면 해당 테이블 사용하도록 설정
#    + 자체적으로 검사할 수 있는 기능 필요

# 3. 틍성 테이블에 데이터 삽입 및 수정
#    > 데이터가 SQL 문법과 테이블 구조에 적합한지 검사하는 함수)

# 4. 특정 테이블의 데이터 검색 결과 조회
#    > SELECT 기능인데 * 전체열 or 특정열인지 선택할 수 있는 기능 필요

# 5. 테이블 삭제
#    > 어떤 테이블 삭제할건지 지정하는 기능

# 6. 조인 결과 리턴은 뺌

# test_20250218 < 스키마 만듦

import tkinter as tk
# from tkinter import ttk
import pymysql
connection = pymysql.connect(  # 연결 객체 초기화
  host='localhost', # 접속하려는 주소 ip 지정
  user='root', # 해당 ip에 mysql 서버 계정
  password='0000', # 해당 계정의 pw
  database='test_20250218', # 접속하려는 DB이름
  port=3306 # 포트 번호
)

root=tk.Tk()
root.title("test_2025.02.18")

cursor=connection.cursor()


# 테이블이 있는 지 확인하는 함수
# def new_table():
#   CREATE TABLES  IF NOT EXISTS 테이블명
# tk와 어떻게 활용해야 할까

# 입력 받고 표로 보여주는 게 나을 것 같고 없으면 없다고 메세지 띄우고
# 어떻게 값을 가지고 와서 mysql에서 검색하는 걸까
# 매개변수로 가지고 오나?
# 데이터 값을 가져오는 법 / 

#
# label=tk.Label(root,text="검색")
# label.pack()
#
# text_box=tk.Text(root,height=10,width=30)
# text_box.pack()
#
# def check_table():
#   text_content=text_box.get("1.0","end-1c")
#   label.config(text=f"검색할 텍스트:\n{text_content}")
#
# button=tk.Button(root,text="내용보기",command=check_table)
# button.pack()

root.mainloop()


