# # 10진수와 2진수 변환
# print("{:b}".format(10))
# print(int("1010",2))
#
# # 10진수와 8진수 변환
# print("{:o}".format(10))
# print(int("12",8))
#
# # 10진수와 16진수 변환
# print("{:x}".format(10))
# print(int("10",16))
# bin(),oct(),hex() 함수를 사용가능하지만 주로 format이 더 편함 추가로는 count()

# # 리스트 변수명=[결과식 for 반복변수 in 반복가능한 객체 if 조건문]
# 리스트내포
# 1부터 100사이 숫자 range(1,101)
# output= []
# for i in range(1,101):
#     if "{:b}".format(i).count("0")==1:
#         output.append(i)
# for i in output:
#     print("{} : {}".format(i, "{:b}".format(i)))
# print("합계:",sum(output))

# output= [i for i in range(1,101)if "{:b}".format(i).count("0")==1]
# for i in output:
#     print("{} : {}".format(i, "{:b}".format(i)))
# print("합계:",sum(output))

# 리스트내포 해석만 가능해도 괜찮음


# p268
# a=[1,2,3,4,1,2,3,1,4,1,2,3]
# counter={}
# for i in a:
#     if i not in counter:
#         counter[i]=0 #if문 안에서 만
#     counter[i]+=1 #for문이 돌면 항상 읽음
# print(len(list(counter.keys())))
# print((list(counter.keys())))
# print(len(counter.keys()))
# print(counter.keys())
#
#
# atgc=input("염기서열입력")
# print(atgc)
# counter={}
# for i in atgc:
#     if i not in counter:
#         counter[i] = 0  # if문 안에서 만
#     counter[i] += 1  # for문이 돌면 항상 읽음
#
# print(counter)



# atgc=input("염기서열입력")
# print(atgc)
# l=[]
# for i in range(0,len(atgc),3):
#     if len(atgc[i:i+3])==3:
#         l.append(atgc[i:i+3])
# print(l)

# atgc=input("염기서열입력")
# l=[atgc[i:i+3] for i in range(0,len(atgc),3) if len(atgc[i:i+3])==3]
# counter={}
# for i in l:
#     if i not in counter:
#         counter[i]=0
#     counter[i]+=1
# print(counter)



# a=[1,2,[3,4],5,[6,7],[8,9]]
# output=[]
# for i in a:
#     if type(i)==list:
#         for j in i:
#             output.append(j)
#     else:
#         output.append(i)
# print(output)

# 여기까지가 p270



# 데이터 타입 튜플
# 튜플은 리스트와 비슷
# 리스트는 []
# 튜플은 ()
# 튜플은 리스트와 마찬가지로 여러 요소를 담는 데이터 타입이다
# 리스트는 요소의 삭제,수정 추가 가능하지만 튜플은 안딤
# 튜플은 보통 생성보다는 함수의 결과로 나오는 경우가 많음

# # 튜플의 생성
# tuple1=()#빈 튜플
# tuple2=(1, )# 요소가 1개인 튜플은 값 뒤에 쉼표를 작성
# tuple3=(1,2)
# tuple4=(1,2,3)
# tuple5=1,2,3 # 괄호 없이 변수에 여러 값을 쉼표로 동시에 주면 튜플로 묶여서 변수에 할당
# tuple6=('a','b',('aaa','ccc')) #중첩
#
# print(tuple4[0]) #인덱스를 통한 조회: 읽기
# # tuple4[0]=100 # 인덱스를 통한 재할당(쓰기) 안됨 >TypeError: 'tuple' object does not support item assignment
# # del tuple4[0] # del 키워드를 통한 요소 삭제 안됌
#
# print(tuple4[:]) #슬라이싱 사용 가능
#
# print(tuple3+tuple4) #+연산은 리스트와 마찬가지로 '연결' 가능
# print(tuple4*10) # *연산도 리스트와 마찬가지로 '반복'가능
# print(len(tuple4)) #len 사용 가능




# 함수
# 호출이란 함수 사용
# 매개변수
# 리턴값
# 가변 매개변수
# 기본 매개변수

# 리스트.append()<전용함수,print(),del 함수는 기본적으로 ()가 있음

# ()안에 전달 인자
# print는 return값이 없으므로 따로 값을 주어질 수 없고 담을 수만 있음
# x=print(123)<불가능
# x=len("A") 가능
# 함수,대입연산자

# 내장(빌트인) 함수: 파이썬에 기본적으로 구현되어 있는 함수들
# 사용자 정의 함수: 우리가 직접 만드는 함수

# 함수 생성 방법
"""
del 함수이름():
    함수 내에서 실행하려는 문장

"""

# # 함수의 정의 (자주 사용할 예정)
# def print3():
#     print("안녕하세요.")
#     print("안녕하세요.")
#     print("안녕하세요.")
#
#
# print3()

# # 함수의 정의 기준은 반복 사용성이 있는지 여부
# print()
#
# def print33(v,n):
#     for i in range(n):
#         print(v)
# print33("123",100)


# def printNtimes(v,n):
#     for i in range(n):
#         print(v)
# printNtimes("123",100)
# # 매개변수와 인자를 맞춰줌
#
# print(1,1,1,1,1,1,1,1)

# # 가변매개변수

# def print_n_time(n, *values):
#     for i in range(n):
#         for values in values:
#             print(values)
#         print()
#
# print_n_time(3,"안녕하세요","즐거운","파이썬 프로그래밍")
#
#
# def printN(n, *v):
#     for i in range(n):
#         for j in v:
#             print(j)
#         print()
#
# printN(3,"안녕하세요","123123","2345612","ㄹㅇㄹㅇㄹㄹ","ㅇㅇㅇㅇㅇㅇㅇ")


# 일반(n)>가변(*)>기본(값) 매개변수 순으로 작성
# 가변 매개변수 (*매개변수로 여러깂을 받는 매개변수)
# 기본 매개 변수 (기변 값을 가진 매개변수)

# # 기본 매개변수
# def print_n_time(value, n=2):
#     for i in range(n):
#         print(value)
#
# print_n_time("안녕하세요")

# 키워드 매개변수

# *value
# n=2

# 기본이 앞에 오면 의미가 사라진다
# def aaa(n=2,*value):
# 오류

# 가변이 기본보다 앞에 올때
# def aaa(*value,n=2):
#     >전부 두번씩 출력

# while True:
#     print(".",end="") #end="\n"  #kwarg 키워드 매개변수
#
# def print_n_times(*value, n=2):
#     for i in range(n):
#         for value in value:
#             print(value)
#         print()
# print_n_times("ddd","dd","ddd",n=3)

# 키워드 매개변수

# def test(a,b=10,c=100):
#     if type(a)!=int:
#         # return -1 #함수의 탈출
#         return   # 함수의 탈출
#     else:
#         return a+b+c
# # print(test)
# print(test("xvzbvbb"))
    # print(a+b+c)
    # return 999
# test(10,c=200)
#     return a+b+c
#     return "안녕"
#     return
# # 함수는 return으로 탈출/반복문은 break
# print(test(a=10,b=20,c=30))
# *value
# n=2

# def test(a,b=10,c=100):
#     return a+b+c
# # print(test)
# print(test(a=10,b=20,c=30))
# return 이 없는 함수의 반환결과는 none

"""

def 함수면(매개변수):
변수=초깃값
실행문
실행문
실행문
return
"""


x=100 # 선언과 할당
# print(x)
x=200 # 재할당
# print(x)
x=200+x # 조회하는 x /조회+200
# print(x)

# def x(x): #전부 x여서 햇갈려서 제대로 실행이 안됨
#     # x=100 #지역변수 #함수내변수
#     print(x)
# x(x)

# def y(n):
#     x=100 #지역변수 #함수내변수
#     print(x)
# y(1000)
#
# def y(n):
#     x=1
#     x=x+100 #x선언
#     print(x)
# y(1000)
# 함수내 생성 함수는 내부에서 유효

# def y(x): #전부 x여서 햇갈려서 제대로 실행이 안됨
#     print(x)
# y(x)


# def aaa():
#     print("dddd")
# aaa()

x=100 # 선언과 할당
x=200 # 재할당
x=200+x # 조회하는 x /조회+200

def x(x,y):
    x=5
    x=x+100
    print(x)
x(1000,x)
print(x)